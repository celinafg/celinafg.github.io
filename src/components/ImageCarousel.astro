---
export interface CarouselImage {
  src: string;
  alt: string;
  caption?: string;
}

export interface Props {
  images: CarouselImage[];
  width?: string;
  height?: string;
  className?: string;
  autoplay?: boolean;
  interval?: number; // in milliseconds
  showDots?: boolean;
  showArrows?: boolean;
}

const {
  images,
  width = "800px",
  height = "450px",
  className = "",
  autoplay = false,
  interval = 5000,
  showDots = true,
  showArrows = true,
} = Astro.props;

// Generate a unique ID for this carousel instance
const uniqueId = `carousel-${Math.random().toString(36).substring(2, 11)}`;
---

<div
  class:list={["image-carousel", className]}
  id={uniqueId}
  style={`--carousel-width: ${width}; --carousel-height: ${height};`}
  data-autoplay={autoplay.toString()}
  data-interval={interval}
>
  <div class="carousel-container">
    <div class="carousel-track">
      {
        images.map((image, index) => (
          <div class="carousel-slide" data-index={index}>
            <div class="image-wrapper">
              <img src={image.src} alt={image.alt} />
            </div>
          </div>
        ))
      }
    </div>

    {
      showArrows && (
        <>
          <button class="carousel-button prev" aria-label="Previous slide">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <polyline points="15 18 9 12 15 6" />
            </svg>
          </button>
          <button class="carousel-button next" aria-label="Next slide">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <polyline points="9 18 15 12 9 6" />
            </svg>
          </button>
        </>
      )
    }
  </div>

  <div class="carousel-caption-container">
    {
      images.map((image, index) => (
        <div class="carousel-caption" data-index={index} hidden={index !== 0}>
          {image.caption}
        </div>
      ))
    }
  </div>

  {
    showDots && (
      <div class="carousel-dots">
        {images.map((_, index) => (
          <button
            class:list={["carousel-dot", { active: index === 0 }]}
            data-index={index}
            aria-label={`Go to slide ${index + 1}`}
          />
        ))}
      </div>
    )
  }
</div>

<style>
  .image-carousel {
    margin: 2rem 0;
    max-width: var(--carousel-width);
    margin-left: auto;
    margin-right: auto;
  }

  .carousel-container {
    position: relative;
    width: 100%;
    height: var(--carousel-height);
    overflow: hidden;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .carousel-track {
    display: flex;
    height: 100%;
    transition: transform 0.5s ease-in-out;
  }

  .carousel-slide {
    min-width: 100%;
    height: 100%;
    position: relative;
  }

  .image-wrapper {
    width: 100%;
    height: 100%;
  }

  .carousel-slide img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .carousel-caption-container {
    margin-top: 0.75rem;
    min-height: 1.5rem;
    text-align: center;
  }

  .carousel-caption {
    font-size: 0.9rem;
    font-style: italic;
    color: #555;
    line-height: 1.4;
    padding: 0 0.5rem;
  }

  .carousel-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 44px;
    height: 44px;
    background: rgba(255, 255, 255, 0.7);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #333;
    opacity: 0.8;
    transition:
      opacity 0.3s,
      background-color 0.3s;
    z-index: 10;
  }

  .carousel-button:hover {
    opacity: 1;
    background: rgba(255, 255, 255, 0.9);
  }

  .carousel-button.prev {
    left: 10px;
  }

  .carousel-button.next {
    right: 10px;
  }

  .carousel-button svg {
    width: 24px;
    height: 24px;
  }

  .carousel-dots {
    display: flex;
    justify-content: center;
    gap: 8px;
    margin-top: 12px;
  }

  .carousel-dot {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background: #ccc;
    border: none;
    padding: 0;
    cursor: pointer;
    transition:
      background-color 0.3s,
      transform 0.2s;
  }

  .carousel-dot:hover {
    background: #999;
  }

  .carousel-dot.active {
    background: #555;
    transform: scale(1.2);
  }
</style>

<script define:vars={{ uniqueId, images }}>
  // Self-executing function to avoid polluting global scope
  (function () {
    function initCarousel() {
      const carousel = document.getElementById(uniqueId);
      if (!carousel) return;

      const track = carousel.querySelector(".carousel-track");
      const slides = carousel.querySelectorAll(".carousel-slide");
      const captions = carousel.querySelectorAll(".carousel-caption");
      const dots = carousel.querySelectorAll(".carousel-dot");
      const nextButton = carousel.querySelector(".carousel-button.next");
      const prevButton = carousel.querySelector(".carousel-button.prev");

      // Retrieve options from data attributes
      const autoplay = carousel.dataset.autoplay === "true";
      const interval = parseInt(carousel.dataset.interval) || 5000;

      let currentIndex = 0;
      let autoplayTimer;

      // Initialize slides
      updateSlides();

      // Set up auto transition
      if (autoplay) {
        startAutoplay();
      }

      // Add event listeners
      if (nextButton) {
        nextButton.addEventListener("click", () => {
          goToSlide((currentIndex + 1) % slides.length);
          if (autoplay) resetAutoplay();
        });
      }

      if (prevButton) {
        prevButton.addEventListener("click", () => {
          goToSlide((currentIndex - 1 + slides.length) % slides.length);
          if (autoplay) resetAutoplay();
        });
      }

      // Add event listeners to dots
      dots.forEach((dot) => {
        dot.addEventListener("click", () => {
          const index = parseInt(dot.dataset.index);
          goToSlide(index);
          if (autoplay) resetAutoplay();
        });
      });

      // Add swipe support for touch devices
      let touchStartX = 0;
      let touchEndX = 0;

      carousel.addEventListener(
        "touchstart",
        (e) => {
          touchStartX = e.changedTouches[0].screenX;
        },
        { passive: true }
      );

      carousel.addEventListener(
        "touchend",
        (e) => {
          touchEndX = e.changedTouches[0].screenX;
          handleSwipe();
        },
        { passive: true }
      );

      function handleSwipe() {
        const swipeThreshold = 50;
        if (touchEndX < touchStartX - swipeThreshold) {
          // Swipe left - go to next
          goToSlide((currentIndex + 1) % slides.length);
          if (autoplay) resetAutoplay();
        } else if (touchEndX > touchStartX + swipeThreshold) {
          // Swipe right - go to previous
          goToSlide((currentIndex - 1 + slides.length) % slides.length);
          if (autoplay) resetAutoplay();
        }
      }

      // Core functions
      function goToSlide(index) {
        currentIndex = index;
        updateSlides();
      }

      function updateSlides() {
        // Update track position
        if (track) {
          track.style.transform = `translateX(-${currentIndex * 100}%)`;
        }

        // Update captions visibility
        captions.forEach((caption, index) => {
          caption.hidden = index !== currentIndex;
        });

        // Update active dots
        dots.forEach((dot, index) => {
          dot.classList.toggle("active", index === currentIndex);
        });
      }

      function startAutoplay() {
        autoplayTimer = setInterval(() => {
          goToSlide((currentIndex + 1) % slides.length);
        }, interval);
      }

      function resetAutoplay() {
        clearInterval(autoplayTimer);
        startAutoplay();
      }

      // Pause autoplay when user hovers over carousel
      carousel.addEventListener("mouseenter", () => {
        if (autoplay) clearInterval(autoplayTimer);
      });

      carousel.addEventListener("mouseleave", () => {
        if (autoplay) startAutoplay();
      });

      // Make the carousel accessible via keyboard
      carousel.setAttribute("tabindex", "0");
      carousel.addEventListener("keydown", (e) => {
        if (e.key === "ArrowLeft") {
          goToSlide((currentIndex - 1 + slides.length) % slides.length);
          if (autoplay) resetAutoplay();
        } else if (e.key === "ArrowRight") {
          goToSlide((currentIndex + 1) % slides.length);
          if (autoplay) resetAutoplay();
        }
      });
    }

    // Initialize when DOM is ready
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initCarousel);
    } else {
      initCarousel();
    }

    // Re-initialize when Astro view transitions are complete
    document.addEventListener("astro:page-load", initCarousel);
  })();
</script>
