---
import { CldImage } from "astro-cloudinary";

export interface Feature {
  title: string;
  image: string;
  altText?: string;
}

export interface MDXFeatureHighlightProps {
  sectionTitle: string;
  description: string;
  features: Feature[];
  titleClassName?: string;
  type?: "highlight" | "quote" | "callout";
  iconColor?: string;
}

const {
  sectionTitle = "HIGHLIGHTS",
  description,
  features = [],
  titleClassName = "text-gray-400 uppercase tracking-widest text-sm font-medium mb-8",
  type = "highlight",
  iconColor = "text-green-600",
} = Astro.props as MDXFeatureHighlightProps;

const getIcon = (iconType: string) => {
  switch (iconType) {
    case "quote":
      return `<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
                <path d="M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z"></path>
                <path d="M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z"></path>
              </svg>`;
    case "callout":
      return `<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
                <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path>
                <line x1="12" y1="9" x2="12" y2="13"></line>
                <line x1="12" y1="17" x2="12.01" y2="17"></line>
              </svg>`;
    case "highlight":
    default:
      return `<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
                <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2" />
              </svg>`;
  }
};

const iconSvg = getIcon(type);

// Determine if we have a single image or multiple
const hasSingleImage = features.length === 1;
---

<section class="w-full max-w-6xl mx-auto py-4 px-2 prose prose-lg bg-slate-50">
  <div class="flex flex-col items-center justify-center text-center">
    <!-- <div class={iconColor + ""} set:html={iconSvg} /> -->

    <h2 class={titleClassName}>{sectionTitle}</h2>

    <p
      class="text-gray-600 md:text-2xl leading-relaxed max-w-3xl font-light desc"
    >
      {description}
    </p>
  </div>

  {/* Different layouts based on number of images */}
  {
    hasSingleImage ? (
      <div class="single-image-container mx-auto px-4">
        <div class="flex flex-col items-center">
          <div class="single-image-wrapper">
            <CldImage
              src={features[0].image}
              alt={features[0].altText || features[0].title}
              class="w-full cld-single rounded-lg shadow-md mb-3"
            />
          </div>
          <p class="text-gray-800 mt-2 caption text-center">
            {features[0].title}
          </p>
        </div>
      </div>
    ) : (
      <div class="grid grid-cols-1 gap-8 md:grid-cols-3 callout mx-8">
        {features.map((feature) => (
          <div class="flex flex-col items-center">
            <div class="w-full max-w-xs">
              <CldImage
                src={feature.image}
                alt={feature.altText || feature.title}
                class="w-full cld rounded-lg shadow-md mb-3"
              />
            </div>
            <p class="text-gray-800 mt-0 caption text-center">
              {feature.title}
            </p>
          </div>
        ))}
      </div>
    )
  }
</section>
<style>
  .caption {
    font-size: 0.8rem;
  }

  .desc {
    font-size: 1.3rem;
    padding: 0 4rem;
    line-height: 1.4;
  }

  .cld {
    height: 30vh;
  }

  .single-image-container {
    width: 100%;
    display: flex;
    justify-content: center;
  }

  .single-image-wrapper {
    width: 90%;
    max-width: 800px;
  }

  .cld-single {
    width: 100%;
    height: auto;
    aspect-ratio: 16/9;
    object-fit: cover;
  }

  @media (max-width: 1024px) {
    .desc {
      margin: 0;
      padding: 0;
    }

    .callout {
      padding: 1rem;
      gap: 0;
    }

    .prose p {
      margin-bottom: 0;
    }

    .single-image-wrapper {
      width: 85%;
    }
  }

  @media (max-width: 640px) {
    .single-image-wrapper {
      width: 100%;
    }
  }
</style>
