---
import { CldImage } from "astro-cloudinary";

export interface Project {
  slug: string;
  data: {
    title: string;
    description?: string;
    image?: string;
    client?: string;
    year?: string;
    project?: string;
    role?: string;
    specs?: string[];
    excerpt?: string;
    tags?: string[];
  };
}

export interface Props {
  projects: Project[];
}

const { projects } = Astro.props;
---

<section id="projects" class="project-section">
  <div class="projects-list">
    {
      projects.map((project) => (
        <article class="project-item border-t">
          <a href={`/projects/${project.slug}`} class="project-link">
            <div class="project-content">
              <div class="project-text">
                <div class="project-header">
                  <h3 class="project-title">
                    <span class="title-prefix">
                      {project.data.title.split(" ").slice(0, -1).join(" ")}
                    </span>
                    <span class="title-focus">
                      {project.data.title.split(" ").pop()}
                    </span>
                  </h3>
                </div>
                <div class="project-meta" />
                {project.data.excerpt && (
                  <p class="project-description">{project.data.excerpt}</p>
                )}
                {project.data.tags && project.data.tags.length > 0 && (
                  <div class="tags-container">
                    {project.data.tags.map((tag) => (
                      <span class="tag">{tag}</span>
                    ))}
                  </div>
                )}
                <div class="project-footer">
                  <div class="see-more-wrapper">
                    <span class="see-more">See case study</span>
                    <span class="arrow">â†’</span>
                  </div>
                </div>
              </div>
              {project.data.image && (
                <div class="image-container">
                  <CldImage
                    src={project.data.image}
                    alt={project.data.title}
                    class="project-image"
                    loading="lazy"
                  />
                  <div class="image-overlay" />
                </div>
              )}
            </div>
          </a>
        </article>
      ))
    }
  </div>
</section>

<style>
  .project-section {
    padding: clamp(3rem, 8vw, 6rem) clamp(1rem, 5vw, 3rem);
    background: var(--bg-primary);
  }

  .projects-list {
    max-width: 1400px;
    margin: 0 auto;
    display: block;
    gap: clamp(8rem, 15vh, 12rem);
    justify-content: center;
  }

  .project-item {
    opacity: 0;
    transform: translateY(clamp(20px, 3vh, 40px));
    transition: all 1s cubic-bezier(0.2, 0.8, 0.2, 1);
    position: relative;
  }

  .project-item::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: currentColor;
    opacity: 0.1;
    transform: scaleX(0);
    transform-origin: 0 0;
    transition: transform 0.8s cubic-bezier(0.2, 0.8, 0.2, 1);
  }

  .project-item.in-view {
    opacity: 1;
    transform: translateY(0);
  }

  .project-item.in-view::before {
    transform: scaleX(1);
  }

  .projects-list:hover .project-item:not(:hover) {
    opacity: 0.5;
  }

  .project-link {
    display: block;
    text-decoration: none;
    color: inherit;
    transition: transform 0.5s cubic-bezier(0.2, 0.8, 0.2, 1);
    padding: clamp(4rem, 8vh, 6rem) 0;
  }

  .project-content {
    display: grid;
    grid-template-columns: 1.3fr 2fr;
    gap: clamp(1rem, 4vw, 2rem);
    align-items: flex-start;
    min-height: clamp(400px, 60vh, 600px);
  }

  .project-header {
    margin-bottom: clamp(1rem, 2.5vh, 2rem);
  }

  .project-title {
    font-family: "Space Mono", monospace;
    font-size: clamp(0.8rem, 5vw, 2.4rem);
    font-weight: 500;
    padding-top: 2rem;
    color: var(--text-primary);
    line-height: 1.2;
    letter-spacing: -0.02em;
    transform: translateZ(0);
    transition: transform 0.4s cubic-bezier(0.2, 0.8, 0.2, 1);
    display: flex;
    flex-direction: column;
  }

  /* Clean, consistent title styling */
  .project-title {
    font-weight: 500;
  }

  .project-meta {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    font-family: "Space Mono", monospace;
    font-size: clamp(0.8rem, 1.5vw, 0.875rem);
    color: var(--text-secondary);
    margin-bottom: clamp(1rem, 2.5vh, 1.5rem);
    transform: translateZ(0);
    transition: transform 0.4s cubic-bezier(0.2, 0.8, 0.2, 1);
    background-color: rgba(var(--theme-current-rgb), 0.03);
    border-radius: 0.5rem;
    text-align: left;
  }

  .meta-item {
    display: flex;
    gap: 0.5rem;
  }

  .meta-label {
    font-weight: 600;
    opacity: 0.7;
  }

  .meta-value {
    opacity: 0.9;
  }

  .project-description {
    font-family: "Work Sans", sans-serif;
    line-height: 1.6;
    color: var(--text-secondary);
    margin-bottom: clamp(1.5rem, 4vh, 2.5rem);
    max-width: 40ch;
    transform: translateZ(0);
    transition: transform 0.4s cubic-bezier(0.2, 0.8, 0.2, 1);
    border-left: 2px solid rgba(var(--theme-current-rgb), 0.1);
    text-align: left;
  }

  .tags-container {
    display: flex;
    flex-wrap: wrap;
    margin-bottom: clamp(1.5rem, 4vh, 2.5rem);
    text-align: left;
  }

  .tags-container .tag:first-child {
    padding-left: 0;
  }

  .tag {
    font-family: "Space Mono", monospace;
    font-size: clamp(0.7rem, 1.2vw, 0.8rem);
    color: var(--text-secondary);
    background-color: rgba(var(--theme-current-rgb), 0.05);
    padding: 0.3rem 0.8rem;
    border-radius: 2rem;
    opacity: 0.8;
    transition: opacity 0.4s cubic-bezier(0.2, 0.8, 0.2, 1);
  }

  .project-footer {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    font-family: "Space Mono", monospace;
    font-size: clamp(0.8rem, 1.5vw, 0.875rem);
    text-align: left;
  }

  .see-more-wrapper {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background-color: rgba(var(--theme-current-rgb), 0.5);
    border-radius: 2rem;
    transition: background-color 0.3s ease;
  }

  .project-item:hover .see-more-wrapper {
    background-color: rgba(var(--theme-current-rgb), 0.85);
  }

  .see-more {
    color: var(--text-primary);
    opacity: 0.9;
    transition: all 0.4s cubic-bezier(0.2, 0.8, 0.2, 1);
    transform: translateZ(0);
  }

  .arrow {
    font-family: "Space Mono", monospace;
    font-size: clamp(1rem, 1.5vw, 1.25rem);
    opacity: 0;
    transform: translateX(-10px);
    transition: all 0.5s cubic-bezier(0.2, 0.8, 0.2, 1);
    display: inline-block;
  }

  .image-container {
    position: relative;
    border-radius: clamp(0.5rem, 1vw, 0.75rem);
    overflow: hidden;
    aspect-ratio: 16/9;
    transform: translateZ(0);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  }

  .project-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transform: scale(1.1);
    transition: all 1.2s cubic-bezier(0.2, 0.8, 0.2, 1);
    will-change: transform;
  }

  .image-overlay {
    position: absolute;
    inset: 0;
    background: linear-gradient(
      to bottom,
      rgba(var(--theme-current-rgb), 0.05),
      rgba(var(--theme-current-rgb), 0.1)
    );
    opacity: 0;
    transition: opacity 0.6s cubic-bezier(0.2, 0.8, 0.2, 1);
  }

  .project-item:hover .arrow {
    opacity: 1;
    transform: translateX(2px);
  }

  .project-item:hover .project-title {
    transform: translateY(-2px);
  }

  .project-item:hover .project-meta,
  .project-item:hover .project-description {
    transform: translateY(-1px);
  }

  .project-item:hover .see-more {
    opacity: 1;
    transform: translateX(0);
  }

  .project-item:hover .project-image {
    transform: scale(1.05) translateY(-1%);
  }

  .project-item:hover .image-overlay {
    opacity: 1;
  }

  .project-item:hover .tag {
    opacity: 1;
  }

  .project-link:focus-visible {
    outline: none;
  }

  .project-link:focus-visible::after {
    content: "";
    position: absolute;
    inset: -4px;
    border: 2px solid var(--text-primary);
    opacity: 0.5;
    border-radius: 0.5rem;
  }

  @media (max-width: 1024px) {
    .project-description {
      max-width: 90ch;
    }
    .projects-list {
      gap: clamp(6rem, 12vh, 8rem);
    }

    .project-content {
      grid-template-columns: 1fr;
      gap: clamp(1.5rem, 4vw, 2.5rem);
    }

    .project-text {
      order: -1;
    }
    .project-link {
      padding: clamp(3rem, 6vh, 4rem) 0;
    }

    .project-content {
      min-height: clamp(300px, 50vh, 400px);
      grid-template-columns: 1fr;
      gap: clamp(1.5rem, 4vw, 2.5rem);
    }
  }

  @media (max-width: 768px) {
    .project-section {
      padding: clamp(2rem, 5vw, 3rem) clamp(1rem, 3vw, 1.5rem);
    }

    .projects-list {
      gap: clamp(4rem, 8vh, 6rem);
    }

    .projects-list:hover .project-item:not(:hover) {
      opacity: 0.8;
    }

    .project-title {
      flex-direction: column;
    }
  }

  @media (hover: none) {
    .projects-list:hover .project-item:not(:hover) {
      opacity: 1;
    }

    .arrow {
      display: none;
    }

    .see-more {
      opacity: 1;
    }
  }
</style>

<script>
  const createScrollAnimation = () => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("in-view");
            observer.unobserve(entry.target);
          }
        });
      },
      {
        threshold: 0.2,
        rootMargin: "-10%",
      }
    );

    document.querySelectorAll(".project-item").forEach((item) => {
      observer.observe(item);
    });
  };

  createScrollAnimation();
</script>
