---
import type { HeaderProps, NavLink } from "../types";
import themeConfig from "../config/themes.json";

const { currentPath } = Astro.props as HeaderProps;

const links: NavLink[] = [
  {
    href: "/",
    label: "/home/",
    color: themeConfig.themes.home.color.rgba,
    theme: "home",
  },
  {
    href: "/about/",
    label: "/about/",
    color: themeConfig.themes.about.color.rgba,
    theme: "about",
  },
  // {
  //   href: "/feed/",
  //   label: "/feed/",
  //   color: themeConfig.themes.feed.color.rgba,
  //   theme: "feed",
  // },
  // {
  //   href: "/playground/",
  //   label: "/playground/",
  //   color: themeConfig.themes.playground.color.rgba,
  //   theme: "playground",
  // },
];
---

<nav id="header" class="border-t border-b">
  <div class="nav-container">
    {
      links.map((link) => (
        <a
          href={link.href}
          class:list={["nav-link", "heading-mono", `theme-${link.theme}`]}
          aria-current={currentPath === link.href ? "page" : undefined}
          data-theme={link.theme}
        >
          {link.label}
        </a>
      ))
    }
  </div>
</nav>

<style>
  .nav-container {
    background-color: #ffffff;
    backdrop-filter: blur(var(--glass-blur));
    -webkit-backdrop-filter: blur(var(--glass-blur));
    display: flex;
    min-width: inherit;
    height: 20vh;
    padding-left: 4rem;
  }

  .nav-link {
    font-size: var(--text-sm, 1rem);
    color: var(--text-secondary);
    text-decoration: none;
    margin-right: var(--spacing-large);
    display: inline-flex;
    align-items: center;
    position: relative;
    transition: all var(--transition-default);
  }

  .nav-link::after {
    content: "";
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 0;
    height: 2px;
    opacity: 0;
    transition:
      width var(--transition-default),
      opacity var(--transition-default),
      background-color var(--transition-default);
  }

  .nav-link:hover {
    color: var(--text-primary);
  }

  /* Theme-specific underlines */
  .theme-home::after {
    background-color: var(--theme-home-rgb);
  }
  .theme-about::after {
    background-color: var(--theme-about-rgb);
  }
  .theme-feed::after {
    background-color: var(--theme-feed-rgb);
  }
  .theme-playground::after {
    background-color: var(--theme-playground-rgb);
  }

  .nav-link[aria-current="page"] {
    color: var(--text-primary);
    font-weight: 700;
  }

  .nav-link[aria-current="page"]::before {
    content: "";
    width: 6px;
    height: 6px;
    border-radius: 50%;
    margin-right: 8px;
    transition:
      background-color var(--transition-default),
      box-shadow var(--transition-default);
  }

  /* Theme-specific dots */
  .theme-home[aria-current="page"]::before {
    background-color: rgb(var(--theme-home-rgb));
    box-shadow: 0 0 12px rgba(var(--theme-home-rgb), 0.4);
  }

  .theme-about[aria-current="page"]::before {
    background-color: rgb(var(--theme-about-rgb));
    box-shadow: 0 0 12px rgba(var(--theme-about-rgb), 0.4);
  }

  .theme-feed[aria-current="page"]::before {
    background-color: rgb(var(--theme-feed-rgb));
    box-shadow: 0 0 12px rgba(var(--theme-feed-rgb), 0.4);
  }

  .theme-playground[aria-current="page"]::before {
    background-color: rgb(var(--theme-playground-rgb));
    box-shadow: 0 0 12px rgba(var(--theme-playground-rgb), 0.4);
  }

  @media (max-width: 768px) {
    .nav-container {
      padding: var(--spacing-unit);
      flex-wrap: wrap;
      gap: var(--spacing-unit);
    }

    .nav-link {
      margin-right: 0;
    }
  }
</style>
