---
export interface Props {
  beforeImage: string;
  afterImage: string;
  beforeAlt?: string;
  afterAlt?: string;
  width?: string;
  height?: string;
  className?: string;
  initialPosition?: number; // Value between 0-100
  caption?: string;
}

const {
  beforeImage,
  afterImage,
  beforeAlt = "Before image",
  afterAlt = "After image",
  width = "800px",
  height = "auto",
  className = "",
  initialPosition = 50,
  caption = "",
} = Astro.props;

// Ensure initialPosition is between 0 and 100
const sliderPosition = Math.max(0, Math.min(100, initialPosition));

const uniqueId = `slider-${Math.random().toString(36).substring(2, 11)}`;
---

<div
  class:list={["before-after-slider", className]}
  id={uniqueId}
  style={`--slider-width: ${width}; --slider-height: ${height};`}
>
  <div class="slider-container">
    <img src={afterImage} alt={afterAlt} class="img-after" />

    <div class="img-overlay" style={`width: ${sliderPosition}%;`}>
      <img src={beforeImage} alt={beforeAlt} class="img-before" />
    </div>

    <div class="slider-handle" style={`left: ${sliderPosition}%;`}></div>
  </div>

  {caption && <figcaption class="slider-caption">{caption}</figcaption>}
</div>

<style>
  .before-after-slider {
    margin: 2rem 0;
  }

  .slider-container {
    position: relative;
    width: 100%;
    max-width: var(--slider-width);
    height: var(--slider-height);
    margin: 0 auto;
    overflow: hidden;
  }

  .slider-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  .img-overlay {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 50%;
    overflow: hidden;
    border-right: 3px solid white;
  }

  .slider-handle {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 50%;
    width: 40px;
    transform: translateX(-50%);
    cursor: ew-resize;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10;
  }

  .slider-handle::after {
    content: "";
    background-color: white;
    width: 3px;
    height: 100%;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
  }

  .slider-handle::before {
    content: "â†”";
    position: absolute;
    color: white;
    font-size: 20px;
    font-weight: bold;
    background-color: rgba(0, 0, 0, 0.6);
    padding: 8px;
    border-radius: 50%;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
  }

  .slider-caption {
    font-size: 0.9rem;
    font-style: italic;
    color: #555;
    text-align: center;
    margin-top: 0.5rem;
    margin-bottom: 0;
    max-width: var(--slider-width);
    margin-left: auto;
    margin-right: auto;
  }
</style>

<script define:vars={{ uniqueId, sliderPosition }}>
  // Use a self-executing function to avoid polluting the global scope
  (function () {
    // Wait for the document to be fully loaded
    function initSlider() {
      const container = document
        .getElementById(uniqueId)
        ?.querySelector(".slider-container");
      if (!container) return;

      const overlay = container.querySelector(".img-overlay");
      const handle = container.querySelector(".slider-handle");

      if (!overlay || !handle) return;

      // Set initial position
      overlay.style.width = `${sliderPosition}%`;
      handle.style.left = `${sliderPosition}%`;

      let isDragging = false;

      // Mouse events
      handle.addEventListener("mousedown", startDrag);
      container.addEventListener("mousemove", drag);
      window.addEventListener("mouseup", stopDrag);

      // Touch events for mobile
      handle.addEventListener("touchstart", startDrag);
      container.addEventListener("touchmove", drag);
      window.addEventListener("touchend", stopDrag);

      function startDrag(e) {
        e.preventDefault();
        isDragging = true;
      }

      function stopDrag() {
        isDragging = false;
      }

      function drag(e) {
        if (!isDragging) return;

        const containerRect = container.getBoundingClientRect();
        let clientX;

        // Get position for both mouse and touch events
        if (e.type === "touchmove") {
          clientX = e.touches[0].clientX;
        } else {
          clientX = e.clientX;
        }

        // Calculate position as percentage of container width
        const position = (clientX - containerRect.left) / containerRect.width;
        const positionPercentage = Math.max(0, Math.min(1, position)) * 100;

        // Update position of overlay and handle
        overlay.style.width = `${positionPercentage}%`;
        handle.style.left = `${positionPercentage}%`;
      }
    }

    // If DOM is already loaded, initialize immediately
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initSlider);
    } else {
      initSlider();
    }

    // Also initialize when Astro view transitions are complete (if applicable)
    document.addEventListener("astro:page-load", initSlider);
  })();
</script>
