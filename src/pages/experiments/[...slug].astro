---
import "../../styles/main.scss";
import { getCollection } from "astro:content";
import TOCHeadings from "../../components/TOCHeading.astro";
import type { GetStaticPaths } from "astro";
import { CldImage } from "astro-cloudinary";
import { getPrevNextPost } from "../../utils/getPrevNextPost";
import { PrevNext } from "../../components";
import Layout from "../../layouts/Layout.astro";

export const getStaticPaths = (async () => {
  const allExperiments = await getCollection("experiments");

  const filteredExperiments = import.meta.env.PROD
    ? allExperiments.filter((experiment) => !experiment.data.draft)
    : allExperiments;

  return filteredExperiments.map((entry, i) => ({
    params: { slug: entry.slug },
    props: {
      entry,
    },
  }));
}) satisfies GetStaticPaths;

const { entry } = Astro.props;
const { slug } = Astro.params;
const allExperiments = await getCollection("experiments");

const { Content, headings } = await entry.render();

const { prev, next } = getPrevNextPost(allExperiments, slug);

interface Heading {
  depth: number;
  slug: string;
  text: string;
}

interface GroupedHeading extends Heading {
  subheadings: GroupedHeading[];
}

function groupHeadingsByHierarchy(headings: Heading[]): GroupedHeading[] {
  const groupedHeadings: GroupedHeading[] = [];
  let currentH2: GroupedHeading | null = null;

  for (const heading of headings) {
    if (heading.depth === 2) {
      currentH2 = { ...heading, subheadings: [] };
      groupedHeadings.push(currentH2);
    } else if (heading.depth === 3 && currentH2) {
      currentH2.subheadings.push({ ...heading, subheadings: [] });
    }
  }

  return groupedHeadings;
}

const groupedHeadings = groupHeadingsByHierarchy(headings);
---

<Layout withDiagonalLines={false} withCont={false} type="experiment">
  <div>
    {
      entry.data.imageCover && (
        <div class="image-container">
          <CldImage
            src={entry.data.imageCover}
            alt={entry.data.title}
            class="project-image"
            loading="eager"
          />
        </div>
      )
    }
  </div>
  <div class="project-layout">
    <aside class="sidebar">
      <TOCHeadings headings={groupedHeadings} />
    </aside>

    <main class="content">
      <div class="content-container">
        <header class="project-header">
          <div class="header-content">
            <div class="title-wrapper fade-in" style="--delay: 0.4s">
              <h1 class="project-title">{entry.data.title}</h1>
            </div>
            <div class="meta-container">
              <div class="meta-column prose fade-in" style="--delay: 0.1s">
                {
                  entry.data.role && (
                    <div class="meta-block">
                      <h2 class="section-title">My Role</h2>
                      {entry.data.role.map((role: string[]) => (
                        <p class="role">{role}</p>
                      ))}
                    </div>
                  )
                }

                {
                  entry.data.experiment && (
                    <div class="meta-block fade-in" style="--delay: 0.2s">
                      <h2 class="section-title">Project</h2>
                      <p>{entry.data.project}</p>
                    </div>
                  )
                }
                {
                  entry.data.specs && (
                    <div class="meta-block fade-in" style="--delay: 0.3s">
                      <h2 class="section-title">Specs</h2>
                      {entry.data.specs.map((spec: string[]) => (
                        <p class="role">{spec}</p>
                      ))}
                    </div>
                  )
                }
              </div>

              {
                entry.data.summary && (
                  <div
                    class="summary-column prose fade-in"
                    style="--delay: 0.4s"
                  >
                    <h2 class="section-title">Summary</h2>
                    {entry.data.summary
                      .split("\n\n")
                      .map((paragraph: string[]) => (
                        <p>{paragraph}</p>
                      ))}
                  </div>
                )
              }
            </div>
          </div>
        </header>
        <article class="prose">
          <Content />
        </article>
      </div>
    </main>
  </div>

  <PrevNext prev={prev} next={next} />
</Layout>

<style>
  .specs {
    display: flex;
    margin: 0;
    padding: 0;
  }
  .image-container {
    overflow: hidden;
    max-height: 80vh;
    height: 100%;
    width: 100%;
    object-fit: contain;
  }

  .prose .role {
    margin: 0.3rem 0 0 0;
  }

  .project-layout {
    display: grid;
    grid-template-columns: 200px 1fr;
    max-width: 1600px;
    margin: 0 auto;
    padding: 1rem;
    margin: 2rem;
  }

  .content {
    background-color: white;
    border-radius: 0.5rem;
    width: 100%;
  }

  .content-container {
    max-width: 75ch;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .project-header {
    padding: 4rem 0;
  }

  .header-content {
    max-width: 75ch;
    margin: 0 auto;
  }

  .title-wrapper {
    margin-bottom: 3rem;
  }

  .project-title {
    line-height: 1.2;
    letter-spacing: -1.8px;
    word-spacing: -1px;
    font-weight: 500;
    margin: 0;
    text-align: flex-start;
    padding-bottom: 2rem;
    font-size: 2.6rem;
  }

  .meta-container {
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 3rem;
  }

  .meta-column,
  .summary-column {
    position: relative;
  }

  .meta-column.prose,
  .summary-column.prose {
    /* Keep the prose styling contained within the columns */
    max-width: 100%;
  }

  .meta-block {
    margin-bottom: 2.4rem;
  }

  .section-title {
    letter-spacing: normal;
    margin-bottom: 1.25rem;
    margin-top: 0 !important;
  }

  :global(.prose) {
    @apply max-w-none text-gray-700 leading-relaxed;
  }

  :global(.prose p) {
    @apply mb-2 mt-2;

    line-height: 1.6;
    font-size: 0.9rem;
  }

  :global(.prose h2) {
    @apply text-sm font-sans uppercase tracking-widest text-blue-600 font-semibold mt-16 mb-8;
    font-size: 0.78rem;
    letter-spacing: 0.09rem !important;
    font-family: "Space Mono", monospace;
  }

  :global(.prose h3) {
    @apply text-2xl font-sans text-gray-800 font-medium mt-12 mb-6;
  }

  :global(.prose blockquote) {
    @apply border-l-4 border-gray-300 pl-6 italic my-8 text-gray-600;
  }

  :global(.prose ul) {
    @apply mt-6 mb-8 list-disc;
  }

  :global(.prose li) {
    @apply text-gray-700 leading-relaxed;
    font-size: 0.8rem;
    line-height: 1.4;
  }

  :global(.prose a) {
    @apply text-blue-600 no-underline hover:underline;
  }

  :global(.prose > *:first-child) {
    @apply mt-0;
  }

  :global(.prose > *:last-child) {
    @apply mb-0;
  }

  :global(.prose blockquote) {
    @apply border-l-4 border-green-600 bg-gray-50 px-6 py-4 my-6 mx-8 rounded-r-md shadow-sm;
    font-style: italic;
  }

  :global(.prose blockquote p) {
    @apply text-gray-700 m-0;
    font-size: 1.1rem;
    line-height: 1.6;
  }

  :global(.prose blockquote cite) {
    @apply block text-right  mt-3;
    font-size: 0.8rem;
    font-style: normal;
  }

  :global(.prose blockquote cite::first-letter) {
    @apply text-green-600;
  }
  /* Animations */
  .fade-in {
    animation: fadeIn 0.8s cubic-bezier(0.22, 1, 0.36, 1) forwards;
    animation-delay: var(--delay, 0s);
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Mobile/tablet responsive adjustments */
  @media (max-width: 1024px) {
    :global(.prose blockquote) {
      margin: 2rem 0;
    }
    .project-layout {
      grid-template-columns: 1fr;
      padding: 0;
    }

    .content {
      border-radius: 0;
    }

    .content-container {
      padding: 0.04rem;
    }

    .project-header {
      padding: 2rem 0;
      margin-bottom: 2rem;
    }

    .sidebar {
      display: none;
    }

    .meta-container {
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    .summary-column {
      margin-top: 1rem;
      padding-top: 1.5rem;
      border-top: 1px solid rgba(229, 231, 235, 0.5);
    }
  }
</style>
