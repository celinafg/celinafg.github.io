---
import "../../styles/main.scss";
import { getCollection } from "astro:content";
import TOCHeadings from "../../components/TOCHeading.astro";
import type { GetStaticPaths } from "astro";
import { CldImage } from "astro-cloudinary";
import { getPrevNextPost } from "../../utils/getPrevNextPost";
import { PrevNext } from "../../components";

import Layout from "../../layouts/Layout.astro";

export const getStaticPaths = (async () => {
  const allProjects = await getCollection("projects");

  const filteredProjects = import.meta.env.PROD
    ? allProjects.filter((project) => !project.data.draft)
    : allProjects;

  return filteredProjects.map((entry, i) => ({
    params: { slug: entry.slug },
    props: {
      entry,
    },
  }));
}) satisfies GetStaticPaths;

const { entry } = Astro.props;
const { slug } = Astro.params;
const allProjects = await getCollection("projects");

const { Content, headings } = await entry.render();

const { prev, next } = getPrevNextPost(allProjects, slug);

interface Heading {
  depth: number;
  slug: string;
  text: string;
}

interface GroupedHeading extends Heading {
  subheadings: GroupedHeading[];
}

function groupHeadingsByHierarchy(headings: Heading[]): GroupedHeading[] {
  const groupedHeadings: GroupedHeading[] = [];
  let currentH2: GroupedHeading | null = null;

  for (const heading of headings) {
    if (heading.depth === 2) {
      currentH2 = { ...heading, subheadings: [] };
      groupedHeadings.push(currentH2);
    } else if (heading.depth === 3 && currentH2) {
      currentH2.subheadings.push({ ...heading, subheadings: [] });
    }
  }

  return groupedHeadings;
}

const groupedHeadings = groupHeadingsByHierarchy(headings);
---

<Layout withDiagonalLines={false} withCont={false} isProject={true}>
  <div>
    {
      entry.data.imageCover && (
        <div class="image-container">
          <CldImage
            src={entry.data.imageCover}
            alt={entry.data.title}
            class="project-image"
            loading="lazy"
          />
        </div>
      )
    }
  </div>
  <div class="project-layout">
    <aside class="sidebar">
      <TOCHeadings headings={groupedHeadings} />
    </aside>

    <main class="content">
      <div class="content-container">
        <header class="project-header">
          <div class="header-content">
            <div class="title-wrapper fade-in" style="--delay: 0.4s">
              <h1 class="project-title">{entry.data.title}</h1>
            </div>
            <div class="meta-grid">
              {
                entry.data.role && (
                  <div class="meta-item fade-in" style="--delay: 0.1s">
                    <span class="label">my role</span>
                    <span class="value">{entry.data.role}</span>
                  </div>
                )
              }
              {
                entry.data.project && (
                  <div class="meta-item fade-in" style="--delay: 0.2s">
                    <span class="label">project</span>
                    <span class="value">{entry.data.project}</span>
                  </div>
                )
              }
              {
                entry.data.specs && (
                  <div class="meta-item fade-in" style="--delay: 0.3s">
                    <span class="label">specs</span>
                    <span class="value">{entry.data.specs}</span>
                  </div>
                )
              }
            </div>
          </div>
        </header>
        <article class="prose">
          <Content />
        </article>
      </div>
    </main>
  </div>

  <PrevNext prev={prev} next={next} />
</Layout>

<style>
  .image-container {
    aspect-ratio: 16 / 9;
    overflow: hidden;
    max-height: 50vh;
    width: 100%;
  }

  .project-layout {
    display: grid;
    grid-template-columns: 270px 1fr;
    max-width: 1600px;
    margin: 0 auto;
    padding: 1rem;
    margin: 2rem;
  }

  .content {
    background-color: white;
    border-radius: 0.5rem;
    width: 100%;
  }

  .content-container {
    max-width: 75ch;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .project-header {
    padding: 4rem 0;
    margin-bottom: 4rem;
    border-bottom: 1px solid rgb(229, 231, 235);
  }

  .header-content {
    max-width: 75ch;
    margin: 0 auto;
  }

  .title-wrapper {
    margin-bottom: 3rem;
  }

  .project-title {
    line-height: 1.2;
    letter-spacing: -1.8px;
    word-spacing: -1px;
    font-weight: 500;
    margin: 0;
    text-align: center;
  }

  .meta-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 2rem;
    margin-top: 3rem;
  }

  .meta-item {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .label {
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    color: var(--text-secondary);
    opacity: 0.6;
  }

  .value {
    font-family: "Space Mono", monospace;
    font-size: 1rem;
    color: var(--text-primary);
  }

  :global(.prose) {
    @apply max-w-none text-gray-700 leading-relaxed;
  }

  :global(.prose p) {
    @apply mb-8;
  }

  :global(.prose h2) {
    @apply text-sm font-sans uppercase tracking-widest text-blue-600 font-semibold mt-16 mb-8;
  }

  :global(.prose h3) {
    @apply text-2xl font-sans text-gray-800 font-medium mt-12 mb-6;
  }

  :global(.prose blockquote) {
    @apply border-l-4 border-gray-300 pl-6 italic my-8 text-gray-600;
  }

  :global(.prose ul) {
    @apply mt-6 mb-8 list-disc;
  }

  :global(.prose li) {
    @apply text-gray-700 leading-relaxed mb-2;
  }

  :global(.prose a) {
    @apply text-blue-600 no-underline hover:underline;
  }

  :global(.prose > *:first-child) {
    @apply mt-0;
  }

  :global(.prose > *:last-child) {
    @apply mb-0;
  }

  /* Animations */
  .fade-in {
    animation: fadeIn 0.8s cubic-bezier(0.22, 1, 0.36, 1) forwards;
    animation-delay: var(--delay, 0s);
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Mobile/tablet responsive adjustments */
  @media (max-width: 1024px) {
    .project-layout {
      grid-template-columns: 1fr;
      padding: 0;
    }

    .content {
      border-radius: 0;
    }

    .content-container {
      padding: 1.5rem;
    }

    .project-header {
      padding: 2rem 0;
      margin-bottom: 2rem;
    }

    .sidebar {
      display: none;
    }
  }
</style>
